buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath("gradle.plugin.com.boxfuse.client:flyway-release:4.2.0")
    }
}

plugins {
    id "org.sonarqube" version "2.2"
    id 'com.github.ksoichiro.console.reporter' version '0.5.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'org.flywaydb.flyway'

sourceSets {
    test {
        java.srcDirs = ['src/test/unit/java']
    }
    integration {
        java.srcDirs = ['src/test/integration/java']
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
}

task felint(type: Exec, description: 'Runs the front-end lint check.', group: 'Verification') {
    workingDir 'src/websrc'
    commandLine 'yarn', 'ci:lint'
}

task febuild (type: Exec, description: 'Runs the front-end webpack build.', group: 'Verification') {
    workingDir 'src/websrc'
    commandLine 'yarn', 'bundle:prod'
}

task devbuild (type: Exec, description: 'Runs the front-end webpack build development.', group: 'Verification') {
    workingDir 'src/websrc'
    commandLine 'yarn', 'bundle'
}

applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]

jacoco {
    toolVersion = "0.7.+"
}

jar {
    baseName = '17high_web'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    jcenter()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '1.5.2.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")
    compile("javax.servlet:jstl")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.flywaydb:flyway-core:4.1.2')

    runtime('mysql:mysql-connector-java')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile('org.springframework:spring-test')
    compile('com.h2database:h2:1.4+')
}



group = 'twwhdevops'

task buildDocker(type: Docker) {
    push = true
    registry = 'registry.cn-hangzhou.aliyuncs.com/wjyao'
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        failOnViolation = false
        rule {
            enabled = true
            limit {
                minimum = 0.85
            }
        }
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
    }
}

test.finalizedBy jacocoTestReport

bootRun {
    systemProperties['spring.profiles.active']='dev'
    environment 'MYSQL_HOST', '127.0.0.1'
    environment 'MYSQL_PORT', '3306'
    environment 'MYSQL_USER', '17high'
    environment 'MYSQL_PASSWORD', '17high'
    environment 'MYSQL_DATABASE', '17high'
}

integration {
    systemProperties['spring.profiles.active']='test'
}

if (project.hasProperty('env') && env == 'dev') {
  println 'In development mode...'
  compileJava.dependsOn devbuild
} else {
  println 'In production mode...'
  compileJava.dependsOn febuild
}

check.dependsOn integration
integration.mustRunAfter test

test {
    environment 'MYSQL_HOST', '127.0.0.1'
    environment 'MYSQL_PORT', '3306'
    environment 'MYSQL_USER', '17high'
    environment 'MYSQL_PASSWORD', '17high'
    environment 'MYSQL_DATABASE', '17high'
}

flyway {
    url = 'jdbc:mysql://localhost:3306/lanedb'
    user = 'lane'
    password = 'Passw0rd'
}
