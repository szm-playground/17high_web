buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

plugins {
	id "org.sonarqube" version "2.2"
    id 'com.github.ksoichiro.console.reporter' version '0.5.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'jacoco'

jacoco {
	toolVersion = "0.7.+"
}

jar {
	baseName = '17high_web'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
	jcenter()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '1.5.2.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")
    compile("javax.servlet:jstl")
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.flywaydb:flyway-core:4.1.2')

	runtime('mysql:mysql-connector-java')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile ('org.springframework:spring-test')
}



group = 'twwhdevops'

task buildDocker(type: Docker) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

jacocoTestCoverageVerification {
	violationRules {
		failOnViolation = false
		rule {
			enabled = true
			limit {
				minimum = 0.85
			}
		}
	}
}

jacocoTestReport {
	reports {
		html.enabled = true
	}
}

task startMysql(type: Exec) {
	commandLine './startMysql.sh'
}

test.finalizedBy jacocoTestReport
//test.finalizedBy "sonarqube"

def getLocalMysqlHost() {
	return [ 'sh', '-c', 'docker inspect --format \'{{ .NetworkSettings.IPAddress }}\' local_mysql' ].execute().text.trim()
}

bootRun {
	environment 'MYSQL_HOST', '127.0.0.1'
	environment 'MYSQL_PORT', '3306'
	environment 'MYSQL_USER', '17high'
	environment 'MYSQL_PASSWORD', '17high'
	environment 'MYSQL_DATABASE', '17high'
}

test {
	environment 'MYSQL_HOST', '127.0.0.1'
	environment 'MYSQL_PORT', '3306'
	environment 'MYSQL_USER', '17high'
	environment 'MYSQL_PASSWORD', '17high'
	environment 'MYSQL_DATABASE', '17high'
}